plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	compile 'org.modelmapper:modelmapper:2.3.8'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

// Generate classes for Crud for 'ModelName' entity.
// Usage: gradle generator -Dmodel=ModelName
task generate() {

	ext.generateFile = { filename, destination -> 
		println "\tGenerating $filename at $destination ..."
		copy {
			from './src/crud-template/' + filename
			into destination
			rename 'Name(.*)', modelName + '$1'
			filter { String line -> 
				line.replaceAll('\\$Model\\$', modelName)
					.replaceAll('\\$model\\$', modelName.toLowerCase())
					.replaceAll('\\$package\\$', packagename)
			}
		}
	}

	ext.modelName = System.getProperty("model")
	ext.packagename = "com.example.crudgenerator"
	ext.packagedir = "./src/main/java/com/example/crudgenerator"
	ext.testpackagedir = "./src/test/java/com/example/crudgenerator"

	doLast {
		println "Generating Crud files for model $modelName:"
		
		generateFile('Name.java', packagedir + '/model')
		generateFile('NameController.java', packagedir + '/controller')
		generateFile('NameControllerTest.java', testpackagedir + '/controller')
		generateFile('NameControllerTestIT.java', testpackagedir + '/controller')
		generateFile('NameDto.java', packagedir + '/dto')
		generateFile('NameRepository.java', packagedir + '/repository')
		generateFile('NameRepositoryTest.java', testpackagedir + '/repository')
		generateFile('NameService.java', packagedir + '/service')
		generateFile('NameServiceImpl.java', packagedir + '/service/impl')
		generateFile('NameServiceTest.java', testpackagedir + '/service')
		generateFile('NameTestHelper.java', testpackagedir + '/helper')
	}
}
